name: Release

on:
  push:
    branches: [main, master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Build
        run: npm run build

      - name: Test
        run: npm run test

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet HEAD~1 HEAD -- .; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump
        if: steps.changes.outputs.has_changes == 'true'
        id: version
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, using patch"
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
            if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
              echo "bump_type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "^feat"; then
              echo "bump_type=minor" >> $GITHUB_OUTPUT
            else
              echo "bump_type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Bump version based on type
          if [ "${{ steps.version.outputs.bump_type }}" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "${{ steps.version.outputs.bump_type }}" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Commit and tag
          git add package.json
          git commit -m "chore(release): v$NEW_VERSION [skip ci]"
          git tag "v$NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git push origin ${{ github.ref_name }}
          git push origin --tags

      - name: Publish to NPM
        if: steps.changes.outputs.has_changes == 'true'
        run: npm publish --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.new_version }}
          release_name: Release v${{ env.new_version }}
          body: |
            ## Changes
            
            See [CHANGELOG.md](./CHANGELOG.md) for details.
            
            ## Installation
            
            ```bash
            npm install -g @blendsdk/lockstep@${{ env.new_version }}
            ```
          draft: false
          prerelease: false
